Total: 620 samples
     521  84.0%  84.0%      619  99.8% iterateLocks
      81  13.1%  97.1%       81  13.1% __strcmp_sse42
       8   1.3%  98.4%       42   6.8% SortedList_lookup
       6   1.0%  99.4%       56   9.0% SortedList_insert
       3   0.5%  99.8%        3   0.5% _init
       1   0.2% 100.0%        1   0.2% __GI___ctype_init
       0   0.0% 100.0%      620 100.0% __clone
       0   0.0% 100.0%      620 100.0% start_thread
ROUTINE ====================== iterateLocks in /u/eng/ugrad/matei/111CS/2BProject/lab2_list.c
   521    619 Total samples (flat / cumulative)
     .      .  105:     fprintf(stderr, "Error could not start timer");
     .      .  106:     exit(1);
     .      .  107: }
     .      .  108: 
     .      .  109: void* iterateLocks( void* threadNum)
---
     .      .  110: {
     .      .  111: 
     .      .  112:     struct timespec startTime;
     .      .  113:     struct timespec endTime;
     .      .  114: 
     .      .  115:     int thread = *(int*)threadNum;
     .      .  116: 
     .      .  117:     int i = thread;
     .      .  118:     //insert
     .      .  119:     for(; i < numberOfElements; i += numberOfThreads)
     .      .  120:     {
     .      .  121:         if(lock == 'x')
     .      .  122:         {
     .      .  123:             SortedList_insert(&sortedList[lists[i]], &elementArray[i]);
     .      .  124:         }
     .      .  125:         else if ( lock == MUTEX )
     .      .  126:         {
     .      .  127:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  128:             {
     .      .  129:                 timerStartError();
     .      .  130:             }
     .      .  131: 
     .      .  132:             pthread_mutex_lock(&mutexes[lists[i]]);
     .      .  133: 
     .      .  134:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  135:             {
     .      .  136:                 timerEndError();
     .      .  137:             }
     .      .  138: 
     .      .  139:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  140: 
     .      .  141:             SortedList_insert(&sortedList[lists[i]], &elementArray[i]);
     .      .  142: 
     .      .  143:             pthread_mutex_unlock(&mutexes[lists[i]]);
     .      .  144:         }
     .      .  145:         else if ( lock == SPINLOCK )
     .      .  146:         {
     .      .  147:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  148:             {
     .      .  149:                 timerStartError();
     .      .  150:             }
     .      .  151: 
   363    363  152:             while(__sync_lock_test_and_set(&spinLock[lists[i]], 1))
     .      .  153:             {
     .      .  154:                 // just wait for resource to be freed up
     .      .  155:             }
     .      .  156: 
     .      .  157:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  158:             {
     .      .  159:                 timerEndError();
     .      .  160:             }
     .      .  161: 
     .      .  162:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  163: 
     .     56  164:             SortedList_insert(&sortedList[lists[i]], &elementArray[i]);
     .      .  165: 
     .      .  166:             __sync_lock_release(&spinLock[lists[i]]);
     .      .  167:         }
     .      .  168:     }
     .      .  169: 
     .      .  170:     //length
     .      .  171:     if(lock == 'x')
     .      .  172:     {
     .      .  173:         int j = 0;
     .      .  174:         for(; j < numberOfLists; j++)
     .      .  175:         {
     .      .  176:             int k = SortedList_length(&sortedList[j]);
     .      .  177:             if( k < 0 )
     .      .  178:             {
     .      .  179:                 fprintf(stderr, "invalid list, could not retrieve size 1 \n");
     .      .  180:                 exit(2);
     .      .  181:             }
     .      .  182:             length += k;
     .      .  183:         }
     .      .  184: 
     .      .  185:     }
     .      .  186:     else if ( lock == MUTEX )
     .      .  187:     {
     .      .  188:         int j = 0;
     .      .  189:         for(; j < numberOfLists; j++) {
     .      .  190: 
     .      .  191:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  192:             {
     .      .  193:                 timerStartError();
     .      .  194:             }
     .      .  195: 
     .      .  196:             pthread_mutex_lock(&mutexes[j]);
     .      .  197: 
     .      .  198:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  199:             {
     .      .  200:                 timerEndError();
     .      .  201:             }
     .      .  202: 
     .      .  203:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  204: 
     .      .  205:             int k = SortedList_length(&sortedList[j]);
     .      .  206:             if( k < 0 )
     .      .  207:             {
     .      .  208:                 fprintf(stderr, "invalid list, could not retrieve size 2 \n");
     .      .  209:                 exit(2);
     .      .  210:             }
     .      .  211:             length += k;
     .      .  212:             pthread_mutex_unlock(&mutexes[j]);
     .      .  213:         }
     .      .  214:     }
     .      .  215:     else if ( lock == SPINLOCK )
     .      .  216:     {
     .      .  217:         int j = 0;
     .      .  218:         for(; j < numberOfLists; j++) {
     .      .  219: 
     .      .  220:             if (clock_gettime(CLOCK_MONOTONIC, &startTime) < 0) {
     .      .  221:                 timerStartError();
     .      .  222:             }
     .      .  223: 
     .      .  224:             while (__sync_lock_test_and_set(&spinLock[j], 1)) {
     .      .  225:                 // just wait for resource to be freed up
     .      .  226:             }
     .      .  227: 
     .      .  228:             if (clock_gettime(CLOCK_MONOTONIC, &endTime) < 0) {
     .      .  229:                 timerEndError();
     .      .  230:             }
     .      .  231: 
     .      .  232:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  233: 
     .      .  234:             int k = SortedList_length(&sortedList[j]);
     .      .  235:             if (k < 0) {
     .      .  236:                 fprintf(stderr, "invalid list, could not retrieve size 3 \n");
     .      .  237:                 exit(2);
     .      .  238:             }
     .      .  239:             length += k;
     .      .  240: 
     .      .  241:             __sync_lock_release(&spinLock[j]);
     .      .  242:         }
     .      .  243:     }
     .      .  244: 
     .      .  245:     //delete
     .      .  246:     i = thread;
     .      .  247:     SortedListElement_t* removeElement;
     .      .  248: 
     .      .  249:     for(; i < numberOfElements; i += numberOfThreads)
     .      .  250:     {
     .      .  251:         if(lock == 'x')
     .      .  252:         {
     .      .  253:             removeElement = SortedList_lookup(&sortedList[lists[i]], elementArray[i].key);
     .      .  254:             if(removeElement == NULL)
     .      .  255:             {
     .      .  256:                 fprintf(stderr, "could not find element \n");
     .      .  257:                 exit(2);
     .      .  258:             }
     .      .  259: 
     .      .  260:             if(SortedList_delete(removeElement) == 1)
     .      .  261:             {
     .      .  262:                 fprintf(stderr, "could not remove element \n");
     .      .  263:                 exit(2);
     .      .  264:             }
     .      .  265:         }
     .      .  266:         else if ( lock == MUTEX )
     .      .  267:         {
     .      .  268:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  269:             {
     .      .  270:                 timerStartError();
     .      .  271:             }
     .      .  272: 
     .      .  273:             pthread_mutex_lock(&mutexes[lists[i]]);
     .      .  274: 
     .      .  275:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  276:             {
     .      .  277:                 timerEndError();
     .      .  278:             }
     .      .  279: 
     .      .  280:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  281: 
     .      .  282:             removeElement = SortedList_lookup(&sortedList[lists[i]], elementArray[i].key);
     .      .  283: 
     .      .  284:             if(removeElement == NULL)
     .      .  285:             {
     .      .  286:                 fprintf(stderr, "could not find element \n");
     .      .  287:                 exit(2);
     .      .  288:             }
     .      .  289: 
     .      .  290:             if(SortedList_delete(removeElement) == 1)
     .      .  291:             {
     .      .  292:                 fprintf(stderr, "could not remove element \n");
     .      .  293:                 exit(2);
     .      .  294:             }
     .      .  295:             pthread_mutex_unlock(&mutexes[lists[i]]);
     .      .  296:         }
     .      .  297:         else if ( lock == SPINLOCK )
     .      .  298:         {
     .      .  299:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  300:             {
     .      .  301:                 timerStartError();
     .      .  302:             }
     .      .  303: 
   158    158  304:             while(__sync_lock_test_and_set(&spinLock[lists[i]], 1))
     .      .  305:             {
     .      .  306:                 // just wait for resource to be freed up
     .      .  307:             }
     .      .  308: 
     .      .  309:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  310:             {
     .      .  311:                 timerEndError();
     .      .  312:             }
     .      .  313: 
     .      .  314:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  315: 
     .     42  316:             removeElement = SortedList_lookup(&sortedList[lists[i]], elementArray[i].key);
     .      .  317: 
     .      .  318:             if(removeElement == NULL)
     .      .  319:             {
     .      .  320:                 fprintf(stderr, "could not find element \n");
     .      .  321:                 exit(2);
     .      .  322:             }
     .      .  323: 
     .      .  324:             if(SortedList_delete(removeElement) == 1)
     .      .  325:             {
     .      .  326:                 fprintf(stderr, "could not remove element \n");
     .      .  327:                 exit(2);
     .      .  328:             }
     .      .  329:             __sync_lock_release(&spinLock[lists[i]]);
     .      .  330:         }
     .      .  331:     }
     .      .  332:     return NULL;
     .      .  333: }
---
     .      .  334: 
     .      .  335: int main( int argc, char* argv[] )
     .      .  336: {
     .      .  337:     static struct option long_options[] = {
     .      .  338:             {"threads"   , optional_argument, NULL, THREADS   },
ROUTINE ====================== iterateLocks in /u/eng/ugrad/matei/111CS/2BProject/lab2_list.c
   521    619 Total samples (flat / cumulative)
     .      .  105:     fprintf(stderr, "Error could not start timer");
     .      .  106:     exit(1);
     .      .  107: }
     .      .  108: 
     .      .  109: void* iterateLocks( void* threadNum)
---
     .      .  110: {
     .      .  111: 
     .      .  112:     struct timespec startTime;
     .      .  113:     struct timespec endTime;
     .      .  114: 
     .      .  115:     int thread = *(int*)threadNum;
     .      .  116: 
     .      .  117:     int i = thread;
     .      .  118:     //insert
     .      .  119:     for(; i < numberOfElements; i += numberOfThreads)
     .      .  120:     {
     .      .  121:         if(lock == 'x')
     .      .  122:         {
     .      .  123:             SortedList_insert(&sortedList[lists[i]], &elementArray[i]);
     .      .  124:         }
     .      .  125:         else if ( lock == MUTEX )
     .      .  126:         {
     .      .  127:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  128:             {
     .      .  129:                 timerStartError();
     .      .  130:             }
     .      .  131: 
     .      .  132:             pthread_mutex_lock(&mutexes[lists[i]]);
     .      .  133: 
     .      .  134:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  135:             {
     .      .  136:                 timerEndError();
     .      .  137:             }
     .      .  138: 
     .      .  139:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  140: 
     .      .  141:             SortedList_insert(&sortedList[lists[i]], &elementArray[i]);
     .      .  142: 
     .      .  143:             pthread_mutex_unlock(&mutexes[lists[i]]);
     .      .  144:         }
     .      .  145:         else if ( lock == SPINLOCK )
     .      .  146:         {
     .      .  147:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  148:             {
     .      .  149:                 timerStartError();
     .      .  150:             }
     .      .  151: 
   363    363  152:             while(__sync_lock_test_and_set(&spinLock[lists[i]], 1))
     .      .  153:             {
     .      .  154:                 // just wait for resource to be freed up
     .      .  155:             }
     .      .  156: 
     .      .  157:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  158:             {
     .      .  159:                 timerEndError();
     .      .  160:             }
     .      .  161: 
     .      .  162:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  163: 
     .     56  164:             SortedList_insert(&sortedList[lists[i]], &elementArray[i]);
     .      .  165: 
     .      .  166:             __sync_lock_release(&spinLock[lists[i]]);
     .      .  167:         }
     .      .  168:     }
     .      .  169: 
     .      .  170:     //length
     .      .  171:     if(lock == 'x')
     .      .  172:     {
     .      .  173:         int j = 0;
     .      .  174:         for(; j < numberOfLists; j++)
     .      .  175:         {
     .      .  176:             int k = SortedList_length(&sortedList[j]);
     .      .  177:             if( k < 0 )
     .      .  178:             {
     .      .  179:                 fprintf(stderr, "invalid list, could not retrieve size 1 \n");
     .      .  180:                 exit(2);
     .      .  181:             }
     .      .  182:             length += k;
     .      .  183:         }
     .      .  184: 
     .      .  185:     }
     .      .  186:     else if ( lock == MUTEX )
     .      .  187:     {
     .      .  188:         int j = 0;
     .      .  189:         for(; j < numberOfLists; j++) {
     .      .  190: 
     .      .  191:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  192:             {
     .      .  193:                 timerStartError();
     .      .  194:             }
     .      .  195: 
     .      .  196:             pthread_mutex_lock(&mutexes[j]);
     .      .  197: 
     .      .  198:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  199:             {
     .      .  200:                 timerEndError();
     .      .  201:             }
     .      .  202: 
     .      .  203:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  204: 
     .      .  205:             int k = SortedList_length(&sortedList[j]);
     .      .  206:             if( k < 0 )
     .      .  207:             {
     .      .  208:                 fprintf(stderr, "invalid list, could not retrieve size 2 \n");
     .      .  209:                 exit(2);
     .      .  210:             }
     .      .  211:             length += k;
     .      .  212:             pthread_mutex_unlock(&mutexes[j]);
     .      .  213:         }
     .      .  214:     }
     .      .  215:     else if ( lock == SPINLOCK )
     .      .  216:     {
     .      .  217:         int j = 0;
     .      .  218:         for(; j < numberOfLists; j++) {
     .      .  219: 
     .      .  220:             if (clock_gettime(CLOCK_MONOTONIC, &startTime) < 0) {
     .      .  221:                 timerStartError();
     .      .  222:             }
     .      .  223: 
     .      .  224:             while (__sync_lock_test_and_set(&spinLock[j], 1)) {
     .      .  225:                 // just wait for resource to be freed up
     .      .  226:             }
     .      .  227: 
     .      .  228:             if (clock_gettime(CLOCK_MONOTONIC, &endTime) < 0) {
     .      .  229:                 timerEndError();
     .      .  230:             }
     .      .  231: 
     .      .  232:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  233: 
     .      .  234:             int k = SortedList_length(&sortedList[j]);
     .      .  235:             if (k < 0) {
     .      .  236:                 fprintf(stderr, "invalid list, could not retrieve size 3 \n");
     .      .  237:                 exit(2);
     .      .  238:             }
     .      .  239:             length += k;
     .      .  240: 
     .      .  241:             __sync_lock_release(&spinLock[j]);
     .      .  242:         }
     .      .  243:     }
     .      .  244: 
     .      .  245:     //delete
     .      .  246:     i = thread;
     .      .  247:     SortedListElement_t* removeElement;
     .      .  248: 
     .      .  249:     for(; i < numberOfElements; i += numberOfThreads)
     .      .  250:     {
     .      .  251:         if(lock == 'x')
     .      .  252:         {
     .      .  253:             removeElement = SortedList_lookup(&sortedList[lists[i]], elementArray[i].key);
     .      .  254:             if(removeElement == NULL)
     .      .  255:             {
     .      .  256:                 fprintf(stderr, "could not find element \n");
     .      .  257:                 exit(2);
     .      .  258:             }
     .      .  259: 
     .      .  260:             if(SortedList_delete(removeElement) == 1)
     .      .  261:             {
     .      .  262:                 fprintf(stderr, "could not remove element \n");
     .      .  263:                 exit(2);
     .      .  264:             }
     .      .  265:         }
     .      .  266:         else if ( lock == MUTEX )
     .      .  267:         {
     .      .  268:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  269:             {
     .      .  270:                 timerStartError();
     .      .  271:             }
     .      .  272: 
     .      .  273:             pthread_mutex_lock(&mutexes[lists[i]]);
     .      .  274: 
     .      .  275:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  276:             {
     .      .  277:                 timerEndError();
     .      .  278:             }
     .      .  279: 
     .      .  280:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  281: 
     .      .  282:             removeElement = SortedList_lookup(&sortedList[lists[i]], elementArray[i].key);
     .      .  283: 
     .      .  284:             if(removeElement == NULL)
     .      .  285:             {
     .      .  286:                 fprintf(stderr, "could not find element \n");
     .      .  287:                 exit(2);
     .      .  288:             }
     .      .  289: 
     .      .  290:             if(SortedList_delete(removeElement) == 1)
     .      .  291:             {
     .      .  292:                 fprintf(stderr, "could not remove element \n");
     .      .  293:                 exit(2);
     .      .  294:             }
     .      .  295:             pthread_mutex_unlock(&mutexes[lists[i]]);
     .      .  296:         }
     .      .  297:         else if ( lock == SPINLOCK )
     .      .  298:         {
     .      .  299:             if( clock_gettime(CLOCK_MONOTONIC, &startTime) < 0 )
     .      .  300:             {
     .      .  301:                 timerStartError();
     .      .  302:             }
     .      .  303: 
   158    158  304:             while(__sync_lock_test_and_set(&spinLock[lists[i]], 1))
     .      .  305:             {
     .      .  306:                 // just wait for resource to be freed up
     .      .  307:             }
     .      .  308: 
     .      .  309:             if( clock_gettime(CLOCK_MONOTONIC, &endTime) < 0 )
     .      .  310:             {
     .      .  311:                 timerEndError();
     .      .  312:             }
     .      .  313: 
     .      .  314:             lockDuration += (endTime.tv_sec - startTime.tv_sec) * 1000000000 + endTime.tv_nsec - startTime.tv_nsec;
     .      .  315: 
     .     42  316:             removeElement = SortedList_lookup(&sortedList[lists[i]], elementArray[i].key);
     .      .  317: 
     .      .  318:             if(removeElement == NULL)
     .      .  319:             {
     .      .  320:                 fprintf(stderr, "could not find element \n");
     .      .  321:                 exit(2);
     .      .  322:             }
     .      .  323: 
     .      .  324:             if(SortedList_delete(removeElement) == 1)
     .      .  325:             {
     .      .  326:                 fprintf(stderr, "could not remove element \n");
     .      .  327:                 exit(2);
     .      .  328:             }
     .      .  329:             __sync_lock_release(&spinLock[lists[i]]);
     .      .  330:         }
     .      .  331:     }
     .      .  332:     return NULL;
     .      .  333: }
---
     .      .  334: 
     .      .  335: int main( int argc, char* argv[] )
     .      .  336: {
     .      .  337:     static struct option long_options[] = {
     .      .  338:             {"threads"   , optional_argument, NULL, THREADS   },
