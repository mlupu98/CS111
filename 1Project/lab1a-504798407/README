NAME: Matei Lupu
EMAIL: mateilupu20@g.ucla.edu
ID: 504798407

The following are the files that are present in the zip
    
lab0.c: source code written in c.

Makefile: makefile that contains 3 options: default, clean and dist. Default simply compiles the source code using the gcc compiler and the -g -Wall and
 -Wextra options. Clean removes all of the files that are created during compilation. Check runs 5 smoke tests on the code to ensure that it is functioning
 properly. Dist creates a zip file containing all of the files listed in this section.
	            

Resources:

https://blog.nelhage.com/2009/12/a-brief-introduction-to-termios-termios3-and-stty/
This website contains information regarding the terms functions that were used. It explained how getattr and setattr
should be used and outlined what the different variable of the terms struct represented.

http://man7.org/linux/man-pages/man3/memset.3.html
This website explained how to use memset to clear the contents of an array.

http://www.unixguide.net/unix/programming/2.1.2.shtml
This website explained how poll can be used to wait for a certain event to happen on a pipe.

http://man7.org/linux/man-pages/man2/dup.2.html
This website explained how to use duplicate to copy follow descriptors.

http://man7.org/linux/man-pages/man3/getopt.3.html
This website was used to remind myself how the getopt long function work

http://man7.org/linux/man-pages/man3/strerror.3.html
This website was used to understand how strerror works

file:///Users/mateilupu/Downloads/fd_juggling.html
This was the file that was provided by the instructor that taught file manipulation.





Difficulties:

The greatest difficulty I faced was to understand how to use the polling and terms functions. It was difficult to understand exactly how 
they work by just reading the man page. As a result, I had to look for examples of when it was used to understand how to use it.  I was lucky
because the termios was explained fairly well in discussion but we did not go over polling as much. 

Another difficulty I had was dealing with creating the pipes properly. At first I was not sure exactly what the pipes represented and why exactly
it was best to create them before forking the processes. The next problem was making sure that I closed and duplicated the correct ones. This took
a while but I solved it by drawing a few diagrams that represented the read and write ends of the pipes.

Last, I faced an issue related to the ^D message being sent from the terminal. The program would exit the mode but it would remain in the
 child process. I realized that in my resetTerminal function that was being called at the exit of the program I was making a mistake.
 After reseting the terminal I would not also kill the child process. I made this change and then everything went smoothly.